/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ó–∞–ø—É—Å–∫: node scripts/optimize-images.js
 */

import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const INPUT_DIR = path.join(__dirname, '..', 'src', 'assets', 'images', 'bg');
const OUTPUT_DIR = path.join(__dirname, '..', 'public', 'assets', 'images', 'optimized');
const TARGET_WIDTH = 150;
const TARGET_HEIGHT = 300;
const MAX_SIZE_KB = 100;

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

async function optimizeImage(inputPath, outputName) {
  try {
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${inputPath}...`);
    
    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
    const webpPath = path.join(OUTPUT_DIR, `${outputName}_150x300.webp`);
    await sharp(inputPath)
      .resize(TARGET_WIDTH, TARGET_HEIGHT, {
        fit: 'cover',
        position: 'center'
      })
      .webp({ 
        quality: 85,
        effort: 6
      })
      .toFile(webpPath);
    
    // –°–æ–∑–¥–∞–µ–º JPEG –≤–µ—Ä—Å–∏—é
    const jpegPath = path.join(OUTPUT_DIR, `${outputName}_150x300.jpg`);
    await sharp(inputPath)
      .resize(TARGET_WIDTH, TARGET_HEIGHT, {
        fit: 'cover',
        position: 'center'
      })
      .jpeg({ 
        quality: 80,
        progressive: true
      })
      .toFile(jpegPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    const webpStats = fs.statSync(webpPath);
    const jpegStats = fs.statSync(jpegPath);
    
    const webpSizeKB = Math.round(webpStats.size / 1024);
    const jpegSizeKB = Math.round(jpegStats.size / 1024);
    
    console.log(`‚úÖ ${outputName}:`);
    console.log(`   WebP: ${webpSizeKB}KB`);
    console.log(`   JPEG: ${jpegSizeKB}KB`);
    
    if (webpSizeKB > MAX_SIZE_KB || jpegSizeKB > MAX_SIZE_KB) {
      console.warn(`‚ö†Ô∏è  ${outputName} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${MAX_SIZE_KB}KB`);
    }
    
    return {
      webp: webpSizeKB,
      jpeg: jpegSizeKB
    };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${inputPath}:`, error.message);
    return null;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  console.log(`üìê –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: ${TARGET_WIDTH}x${TARGET_HEIGHT}px`);
  console.log(`üì¶ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_SIZE_KB}KB`);
  console.log('');
  
  const files = fs.readdirSync(INPUT_DIR);
  const imageFiles = files.filter(file => 
    /\.(jpg|jpeg|png)$/i.test(file)
  );
  
  if (imageFiles.length === 0) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ', INPUT_DIR);
    return;
  }
  
  let totalWebpSize = 0;
  let totalJpegSize = 0;
  let processedCount = 0;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è bg_(N)
  const existingFiles = fs.readdirSync(OUTPUT_DIR).filter(file =>
    file.match(/bg_\s*\(\d+\)_150x300\.(webp|jpg)$/)
  );

  let nextBgNumber = 1;
  existingFiles.forEach(file => {
    const match = file.match(/bg_\s*\((\d+)\)_150x300\./);
    if (match) {
      const num = parseInt(match[1]);
      if (num >= nextBgNumber) {
        nextBgNumber = num + 1;
      }
    }
  });

  console.log(`üìù –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä: bg_(${nextBgNumber})`);
  console.log('');

  for (const file of imageFiles) {
    const inputPath = path.join(INPUT_DIR, file);
    const fileName = path.parse(file).name;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (bg_(N))
    let outputName;
    if (fileName.match(/bg_\s*\(\d+\)$/)) {
      // –§–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
      outputName = fileName;
    } else {
      // –ù–æ–≤—ã–π —Ñ–∞–π–ª - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
      outputName = `bg_ (${nextBgNumber})`;
      nextBgNumber++;
    }

    const result = await optimizeImage(inputPath, outputName);
    
    if (result) {
      totalWebpSize += result.webp;
      totalJpegSize += result.jpeg;
      processedCount++;
    }
  }
  
  console.log('');
  console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
  console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä WebP: ${totalWebpSize}KB`);
  console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä JPEG: ${totalJpegSize}KB`);
  console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä WebP: ${Math.round(totalWebpSize / processedCount)}KB`);
  console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä JPEG: ${Math.round(totalJpegSize / processedCount)}KB`);
  console.log('');
  console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sharp
try {
  // –í ES –º–æ–¥—É–ª—è—Ö sharp —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
  if (sharp) {
    main().catch(console.error);
  }
} catch (error) {
  console.error('‚ùå Sharp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:');
  console.error('npm install sharp');
  console.error('');
  console.error('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.');
}
