import api from './api/config';
import {
  WorkoutDifficulty,
  WorkoutGender,
  type WorkoutDifficultyVO,
  type WorkoutGenderVO,
  type WorkoutCategory,
  type WorkoutProgram,
  type WorkoutExercise,
  type UserWorkoutProgress,
  type CreateWorkoutProgressDTO,
  type UpdateWorkoutProgressDTO,
  type ApiResponse,
  type PaginatedResponse,
  type GetWorkoutCategoriesRequest,
  type GetWorkoutProgramsRequest,
  type GetUserWorkoutProgressRequest,
  type MediaVO
} from '@/types/workout';

/**
 * API V2 Service –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Domain-Driven Design (DDD) —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ SOLID
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã Repository –∏ Service Layer
 */

// Re-export types for convenience
export {
  WorkoutDifficulty,
  WorkoutGender,
  WorkoutDifficultyVO,
  WorkoutGenderVO,
  WorkoutCategory,
  WorkoutProgram,
  WorkoutExercise,
  UserWorkoutProgress,
  CreateWorkoutProgressDTO,
  UpdateWorkoutProgressDTO,
  ApiResponse,
  PaginatedResponse,
  GetWorkoutCategoriesRequest,
  GetWorkoutProgramsRequest,
  GetUserWorkoutProgressRequest,
  MediaVO
};

// === UTILITY FUNCTIONS ===

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è video_url/thumbnail_url –≤ MediaVO
 */
function transformMediaFields<T extends Record<string, any>>(
  item: T
): T & {
  video?: MediaVO;
  thumbnail?: MediaVO;
} {
  const result = { ...item } as T & {
    video?: MediaVO;
    thumbnail?: MediaVO;
  };

  // Video
  if (result.video_file || result.video_url) {
    result.video = {
      url: result.video_url,
      file: result.video_file,
      has_media: !!(result.video_file || result.video_url)
    };
  }

  // Thumbnail
  if (result.thumbnail_file || result.thumbnail_url) {
    result.thumbnail = {
      url: result.thumbnail_url,
      file: result.thumbnail_file,
      has_media: !!(result.thumbnail_file || result.thumbnail_url)
    };
  }

  // Remove old fields
  delete result.video_url;
  delete result.video_file;
  delete result.thumbnail_url;
  delete result.thumbnail_file;

  return result;
}

// === SERVICE CLASS ===

/**
 * WorkoutServiceV2 - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API V2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã Service Layer –∏ Repository
 */
export class WorkoutServiceV2 {
  private static instance: WorkoutServiceV2;
  private readonly baseUrl = '/v2';

  private constructor() {}

  public static getInstance(): WorkoutServiceV2 {
    if (!WorkoutServiceV2.instance) {
      WorkoutServiceV2.instance = new WorkoutServiceV2();
    }
    return WorkoutServiceV2.instance;
  }

  // === WORKOUT CATEGORIES ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
   */
  async getWorkoutCategories(params?: GetWorkoutCategoriesRequest): Promise<WorkoutCategory[]> {
    try {
      console.log('üèãÔ∏è WorkoutServiceV2: === STARTING getWorkoutCategories ===');
      console.log('WorkoutServiceV2: Requesting categories with params:', params);

      const response = await api.get<{ data: WorkoutCategory[] }>(
        `${this.baseUrl}/workout-categories`,
        { params }
      );

      console.log('üì° WorkoutServiceV2: Raw API response:', response);

      let categories: WorkoutCategory[] = [];

      if (response.data && Array.isArray(response.data.data)) {
        categories = response.data.data.map(cat => transformMediaFields(cat));
        console.log('‚úÖ WorkoutServiceV2: Successfully parsed categories:', categories.length);
      } else if (Array.isArray(response.data)) {
        categories = response.data.map(cat => transformMediaFields(cat));
        console.log('‚úÖ WorkoutServiceV2: Direct array response for categories:', categories.length);
      } else {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
      }

      console.log('üìã WorkoutServiceV2: Categories names:', categories.map(cat => cat.name));
        console.log('üéØ WorkoutServiceV2: === SUCCESS getWorkoutCategories ===');
      return categories;
    } catch (error: any) {
      console.error('‚ùå WorkoutServiceV2: === ERROR getWorkoutCategories ===');
      console.error('WorkoutServiceV2: Error details:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ slug
   */
  async getWorkoutCategory(slug: string): Promise<WorkoutCategory> {
    try {
      const response = await api.get<ApiResponse<WorkoutCategory>>(
        `${this.baseUrl}/workout-categories/${slug}`
      );

      if (response.data.success && response.data.data) {
        return transformMediaFields(response.data.data);
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    } catch (error: any) {
      console.error('WorkoutServiceV2.getWorkoutCategory error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      );
    }
  }

  // === WORKOUT PROGRAMS ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
   */
  async getWorkoutPrograms(params?: GetWorkoutProgramsRequest): Promise<PaginatedResponse<WorkoutProgram>> {
    try {
      const response = await api.get<{
        data: WorkoutProgram[],
        current_page: number,
        last_page: number,
        per_page: number,
        total: number
      }>(
        `${this.baseUrl}/workout-programs`,
        { params }
      );

      if (response.data) {
        const programs = response.data.data.map(program => transformMediaFields(program));
        return {
          success: true,
          data: programs,
          current_page: response.data.current_page,
          last_page: response.data.last_page,
          per_page: response.data.per_page,
          total: response.data.total
        };
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    } catch (error: any) {
      console.error('WorkoutServiceV2.getWorkoutPrograms error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ slug
   */
  async getWorkoutProgram(slug: string): Promise<WorkoutProgram> {
    try {
      const response = await api.get<ApiResponse<WorkoutProgram>>(
        `${this.baseUrl}/workout-programs/${slug}`
      );

      if (response.data.success && response.data.data) {
        return transformMediaFields(response.data.data);
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
    } catch (error: any) {
      console.error('WorkoutServiceV2.getWorkoutProgram error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getWorkoutProgramsByCategory(categorySlug: string): Promise<WorkoutProgram[]> {
    try {
      const response = await api.get<{ data: WorkoutProgram[] }>(
        `${this.baseUrl}/workout-programs/category/${categorySlug}`
      );

      if (response.data && Array.isArray(response.data.data)) {
        return response.data.data.map(program => transformMediaFields(program));
      }

      return [];
    } catch (error: any) {
      console.error('WorkoutServiceV2.getWorkoutProgramsByCategory error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
   */
  getProgramsFromCategory(categories: WorkoutCategory[], categoryId: string): WorkoutProgram[] {
    const category = categories.find(cat => cat.id === categoryId);
    return category?.workout_programs || [];
  }

  // === WORKOUT EXERCISES ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ ID
   */
  async getWorkoutExercise(id: string): Promise<WorkoutExercise> {
    try {
      const response = await api.get<ApiResponse<WorkoutExercise>>(
        `${this.baseUrl}/workout-exercises/${id}`
      );

      if (response.data.success && response.data.data) {
        return transformMediaFields(response.data.data);
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ');
    } catch (error: any) {
      console.error('WorkoutServiceV2.getWorkoutExercise error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
   */
  async getWorkoutExercisesByProgram(programId: string): Promise<WorkoutExercise[]> {
    try {
      console.log(`WorkoutServiceV2: Fetching exercises for program ${programId}`);
      const response = await api.get<{ data: WorkoutExercise[] }>(
        `${this.baseUrl}/workout-exercises/program/${programId}`
      );

      console.log('WorkoutServiceV2: Exercises response:', response.data);

      if (response.data && Array.isArray(response.data.data)) {
        return response.data.data.map(exercise => transformMediaFields(exercise));
      }

      return [];
    } catch (error: any) {
      console.error('WorkoutServiceV2.getWorkoutExercisesByProgram error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã'
      );
    }
  }

  // === USER WORKOUT PROGRESS ===

  /**
   * –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async startWorkoutProgress(data: CreateWorkoutProgressDTO): Promise<UserWorkoutProgress> {
    try {
      console.log('WorkoutServiceV2: Starting workout progress with data:', data);
      const response = await api.post<ApiResponse<UserWorkoutProgress>>(
        `${this.baseUrl}/user/workout-progress`,
        data
      );

      if (response.data && response.data.success && response.data.data) {
        return response.data.data;
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É');
    } catch (error: any) {
      console.error('WorkoutServiceV2.startWorkoutProgress error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
   */
  async getUserWorkoutProgress(params?: GetUserWorkoutProgressRequest): Promise<UserWorkoutProgress[]> {
    try {
      console.log('üèãÔ∏è WorkoutServiceV2: === STARTING getUserWorkoutProgress ===');

      const response = await api.get<ApiResponse<UserWorkoutProgress[]>>(
        `${this.baseUrl}/user/workout-progress`,
        { params }
      );

      console.log('üì° WorkoutServiceV2: Raw progress response:', response);

      let progress: UserWorkoutProgress[] = [];

      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        progress = response.data.data;
        console.log('‚úÖ WorkoutServiceV2: User progress loaded from data.data:', progress.length);
      } else if (response.data && Array.isArray(response.data)) {
        progress = response.data;
        console.log('‚úÖ WorkoutServiceV2: Direct array response for progress:', progress.length);
      }

      if (progress.length > 0) {
        console.log('üìã WorkoutServiceV2: First progress item:', progress[0]);
        console.log('üìã WorkoutServiceV2: Progress item keys:', Object.keys(progress[0]));
      }

      console.log('üéØ WorkoutServiceV2: === SUCCESS getUserWorkoutProgress ===');
      return progress;
    } catch (error: any) {
      console.error('‚ùå WorkoutServiceV2: === ERROR getUserWorkoutProgress ===');
      console.error('WorkoutServiceV2: Error details:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
      );
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async createWorkoutProgress(data: CreateWorkoutProgressDTO): Promise<UserWorkoutProgress> {
    try {
      const response = await api.post<ApiResponse<UserWorkoutProgress>>(
        `${this.baseUrl}/user/workout-progress`,
        data
      );

      if (response.data.success && response.data.data) {
        return response.data.data;
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    } catch (error: any) {
      console.error('WorkoutServiceV2.createWorkoutProgress error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async updateWorkoutProgress(id: string, data: UpdateWorkoutProgressDTO): Promise<UserWorkoutProgress> {
    try {
      const response = await api.put<ApiResponse<UserWorkoutProgress>>(
        `${this.baseUrl}/user/workout-progress/${id}`,
        data
      );

      if (response.data.success && response.data.data) {
        return response.data.data;
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    } catch (error: any) {
      console.error('WorkoutServiceV2.updateWorkoutProgress error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserWorkoutProgressStatistics(): Promise<any> {
    try {
      const response = await api.get<ApiResponse<any>>(
        `${this.baseUrl}/user/workout-progress/statistics`
      );

      if (response.data.success && response.data.data) {
        return response.data.data;
      }

      throw new Error(response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    } catch (error: any) {
      console.error('WorkoutServiceV2.getUserWorkoutProgressStatistics error:', error);
      throw new Error(
        error.response?.data?.message ||
        error.message ||
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
      );
    }
  }

  // === UTILITY METHODS ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  getDifficultyDisplayName(difficulty: WorkoutDifficulty): string {
    switch (difficulty) {
      case WorkoutDifficulty.BEGINNER:
        return '–ù–æ–≤–∏—á–æ–∫';
      case WorkoutDifficulty.INTERMEDIATE:
        return '–°—Ä–µ–¥–Ω–∏–π';
      case WorkoutDifficulty.ADVANCED:
        return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
      default:
        return '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∞
   */
  getGenderDisplayName(gender: WorkoutGender): string {
    return gender === WorkoutGender.MALE ? '–ú—É–∂—Å–∫–∏–µ' : '–ñ–µ–Ω—Å–∫–∏–µ';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π
   */
  isWorkoutFree(program: WorkoutProgram): boolean {
    return program.is_free;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: file > url)
   */
  getMediaUrl(media?: MediaVO): string | undefined {
    if (!media || !media.has_media) return undefined;
    return media.file || media.url;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —É –ø—Ä–æ–≥—Ä–∞–º–º—ã/—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
   */
  hasVideo(item: { video?: MediaVO }): boolean {
    return !!(item.video && item.video.has_media);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–≤—å—é —É –ø—Ä–æ–≥—Ä–∞–º–º—ã/—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
   */
  hasThumbnail(item: { thumbnail?: MediaVO }): boolean {
    return !!(item.thumbnail && item.thumbnail.has_media);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
   */
  getVideoUrl(item: { video?: MediaVO }): string | undefined {
    return this.getMediaUrl(item.video);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –ø—Ä–µ–≤—å—é —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
   */
  getThumbnailUrl(item: { thumbnail?: MediaVO }): string | undefined {
    return this.getMediaUrl(item.thumbnail);
  }



  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  calculateTotalWorkoutTime(exercises: WorkoutExercise[]): number {
    return exercises.reduce((total, exercise) => {
      return total + exercise.duration_seconds + (exercise.rest_seconds * (exercise.sets - 1));
    }, 0);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
   */
  getMuscleGroupsDisplay(exercise: WorkoutExercise): string {
    return exercise.muscle_groups.join(', ');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  getEquipmentDisplay(exercise: WorkoutExercise): string {
    return exercise.equipment_needed.join(', ') || '–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
   */
  async getActiveUserWorkouts(): Promise<UserWorkoutProgress[]> {
    try {
      console.log('üèãÔ∏è WorkoutServiceV2: === STARTING getActiveUserWorkouts ===');

      const response = await api.get<ApiResponse<UserWorkoutProgress[]>>(
        `${this.baseUrl}/user/workout-progress`
      );

      console.log('üì° WorkoutServiceV2: Raw API Response:', response);

      let workouts: UserWorkoutProgress[] = [];

      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        workouts = response.data.data;
        console.log('‚úÖ WorkoutServiceV2: Workouts loaded from data.data:', workouts.length);
      } else if (response.data && Array.isArray(response.data)) {
        workouts = response.data;
        console.log('‚úÖ WorkoutServiceV2: Direct array response for workouts:', workouts.length);
      }

      if (workouts.length > 0) {
        console.log('üìã WorkoutServiceV2: First workout sample:', workouts[0]);
      }

      console.log('üéØ WorkoutServiceV2: === SUCCESS getActiveUserWorkouts ===');
      return workouts;
    } catch (error: any) {
      console.error('‚ùå WorkoutServiceV2: === ERROR getActiveUserWorkouts ===');
      console.error('WorkoutServiceV2: Error details:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });

      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—á–∞—Ç–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
   */
  isProgramStarted(programId: string, activeWorkouts: UserWorkoutProgress[]): boolean {
    return activeWorkouts.some(workout => workout.program_id === programId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
   */
  isProgramActive(programId: string, activeWorkouts: UserWorkoutProgress[]): boolean {
    const programWorkouts = activeWorkouts.filter(workout => workout.program_id === programId);

    if (programWorkouts.length === 0) {
      return false;
    }

    // –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —ç—Ç–æ —Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–π completed_at —Ä–∞–≤–Ω–æ null, undefined –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    const hasActiveWorkout = programWorkouts.some(workout =>
      workout.completed_at === null ||
      workout.completed_at === undefined ||
      workout.completed_at === '' ||
      workout.completed_at === 'null'
    );

    console.log(`WorkoutServiceV2: Program ${programId} has active workout:`, hasActiveWorkout);
    return hasActiveWorkout;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã)
   */
  isProgramCompleted(programId: string, activeWorkouts: UserWorkoutProgress[]): boolean {
    const programWorkouts = activeWorkouts.filter(workout => workout.program_id === programId);

    if (programWorkouts.length === 0) {
      return false;
    }

    // –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    // –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const hasCompletedWorkouts = programWorkouts.some(workout =>
      workout.completed_at &&
      workout.completed_at !== null &&
      workout.completed_at !== undefined &&
      workout.completed_at !== '' &&
      workout.completed_at !== 'null'
    );

    const hasActiveWorkouts = programWorkouts.some(workout =>
      !workout.completed_at ||
      workout.completed_at === null ||
      workout.completed_at === undefined ||
      workout.completed_at === '' ||
      workout.completed_at === 'null'
    );

    const isCompleted = hasCompletedWorkouts && !hasActiveWorkouts;

    console.log(`WorkoutServiceV2: Program ${programId} is completed:`, isCompleted, {
      hasCompletedWorkouts,
      hasActiveWorkouts,
      totalWorkouts: programWorkouts.length
    });

    return isCompleted;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (MM:SS)
   */
  formatDuration(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  getProgramStatus(programId: string, activeWorkouts: UserWorkoutProgress[]): 'new' | 'active' | 'completed' {
    if (this.isProgramCompleted(programId, activeWorkouts)) {
      return 'completed';
    }
    if (this.isProgramActive(programId, activeWorkouts)) {
      return 'active';
    }
    return 'new';
  }
}
