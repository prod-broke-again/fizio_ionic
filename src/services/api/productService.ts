import api from './config';

export interface Product {
    id: string;
    name: string;
    brand?: string;
    calories: string;
    protein: string;
    fat: string;
    carbs: string;
    servingSize: string;
    source: 'openfoodfacts' | 'local';
    image?: string;
    ingredients?: string;
    allergens?: string[];
    nutriscore?: string;
}

export interface Nutriments {
  'energy-kcal_100g'?: number;
  proteins_100g?: number;
  carbohydrates_100g?: number;
  fat_100g?: number;
  fiber_100g?: number;
  salt_100g?: number;
  sugars_100g?: number;
  'saturated-fat_100g'?: number;
}

export interface LocalProduct {
  id: number;
  code: string;
  product_name: string;
  brands?: string;
  generic_name?: string;
  categories?: string;
  countries?: string;
  ingredients_text?: string;
  allergens?: string;
  nutriscore_grade?: string;
  nova_group?: string;
  unique_scans_n?: number;
  image_url?: string;
  image_small_url?: string;
  nutriments?: Nutriments;
  created_at: string;
  updated_at: string;
}

export interface SearchResult {
    products: Product[];
    total: number;
    current_page?: number;
    per_page?: number;
    last_page?: number;
}

export interface LocalSearchResult {
    products: LocalProduct[];
    total: number;
    current_page: number;
    per_page: number;
    last_page: number;
}

class ProductService {
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    private async searchLocalProducts(query: string, page: number = 1, perPage: number = 20): Promise<LocalSearchResult> {
        try {
            const response = await api.get('/local-products/search', {
                params: {
                    query,
                    page,
                    per_page: perPage
                }
            });
            return response.data;
        } catch (error) {
            console.error('Error searching local products:', error);
            throw error;
        }
    }

    private async getLocalProductByBarcode(barcode: string): Promise<LocalProduct | null> {
        try {
            const response = await api.get(`/local-products/barcode/${barcode}`);
            return response.data;
        } catch (error) {
            console.error('Error getting local product by barcode:', error);
            return null;
        }
    }

    private async getLocalProductById(id: number): Promise<LocalProduct | null> {
        try {
            const response = await api.get(`/local-products/${id}`);
            return response.data;
        } catch (error) {
            console.error('Error getting local product by ID:', error);
            return null;
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
    private mapLocalProductToProduct(localProduct: LocalProduct): Product {
        const nutriments = localProduct.nutriments || {};
        const calories = nutriments['energy-kcal_100g']?.toString() || '0';
        const protein = nutriments.proteins_100g?.toString() || '0';
        const fat = nutriments.fat_100g?.toString() || '0';
        const carbs = nutriments.carbohydrates_100g?.toString() || '0';
        
        let imageUrl = localProduct.image_url || localProduct.image_small_url || '';
        
        return {
            id: localProduct.id.toString(),
            name: localProduct.product_name || '',
            brand: localProduct.brands || '',
            calories,
            protein,
            fat,
            carbs,
            servingSize: '100g',
            source: 'local',
            ingredients: localProduct.ingredients_text || '',
            allergens: localProduct.allergens ? [localProduct.allergens] : [],
            nutriscore: localProduct.nutriscore_grade || '',
            image: imageUrl
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ, –∑–∞—Ç–µ–º –≤–Ω–µ—à–Ω–∏–µ)
    async searchProducts(query: string, page: number = 1, perPage: number = 20): Promise<SearchResult> {
        if (query.length < 2) {
            console.log('‚ÑπÔ∏è –ü–æ–∏—Å–∫: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å', { query });
            return { products: [], total: 0 };
        }

        console.log('üöÄ –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞', { query, page, perPage });
        const startTime = performance.now();

        try {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
            console.log('üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
            const localResults = await this.searchLocalProducts(query, page, perPage);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
            const mappedProducts = localResults.products.map(product => this.mapLocalProductToProduct(product));
            
            const endTime = performance.now();
            console.log('üìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:', {
                query,
                totalFound: mappedProducts.length,
                searchTime: `${(endTime - startTime).toFixed(2)}ms`,
                firstProduct: mappedProducts[0]
            });

            return {
                products: mappedProducts,
                total: localResults.total,
                current_page: localResults.current_page,
                per_page: localResults.per_page,
                last_page: localResults.last_page
            };
        } catch (error: any) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:', {
                error: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            
            // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return { products: [], total: 0 };
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞
    async getProductDetails(id: string): Promise<Product> {
        console.log('üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞', { id });
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        try {
            const localProduct = await this.getLocalProductById(parseInt(id));
            if (localProduct) {
                console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
                return this.mapLocalProductToProduct(localProduct);
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–π API');
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–π API
        try {
            console.log('üì° OpenFoodFacts API: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞');
            const response = await api.get(`/openfoodfacts/products/barcode/${id}`);
            console.log('‚úÖ OpenFoodFacts API: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
            
            const product = response.data;
            return {
                id: product._id,
                name: product.product_name || product.product_name_ru || '',
                brand: product.brands || '',
                calories: product.nutriments?.['energy-kcal_100g']?.toString() || '0',
                protein: product.nutriments?.proteins_100g?.toString() || '0',
                fat: product.nutriments?.fat_100g?.toString() || '0',
                carbs: product.nutriments?.carbohydrates_100g?.toString() || '0',
                servingSize: '100g',
                source: 'openfoodfacts',
                ingredients: product.ingredients_text || product.ingredients_text_ru || '',
                allergens: product.allergens_tags || [],
                nutriscore: product.nutriscore_grade || '',
                image: product.selected_images?.front?.display?.ru || 
                       product.image_front_url || 
                       product.image_url || 
                       product.images?.front_ru?.sizes?.['400']?.url || 
                       ''
            };
        } catch (error: any) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞:', {
                error: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
    async searchByBarcode(barcode: string): Promise<Product | null> {
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É', { barcode });
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
        try {
            const localProduct = await this.getLocalProductByBarcode(barcode);
            if (localProduct) {
                console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
                return this.mapLocalProductToProduct(localProduct);
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–π API');
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–π API
        try {
            console.log('üì° OpenFoodFacts API: –ü–æ–∏—Å–∫ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É');
            const response = await api.get(`/openfoodfacts/products/barcode/${barcode}`);
            
            if (response.data) {
                console.log('‚úÖ OpenFoodFacts API: –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω');
                const product = response.data;
                return {
                    id: product._id,
                    name: product.product_name || product.product_name_ru || '',
                    brand: product.brands || '',
                    calories: product.nutriments?.['energy-kcal_100g']?.toString() || '0',
                    protein: product.nutriments?.proteins_100g?.toString() || '0',
                    fat: product.nutriments?.fat_100g?.toString() || '0',
                    carbs: product.nutriments?.carbohydrates_100g?.toString() || '0',
                    servingSize: '100g',
                    source: 'openfoodfacts',
                    ingredients: product.ingredients_text || product.ingredients_text_ru || '',
                    allergens: product.allergens_tags || [],
                    nutriscore: product.nutriscore_grade || '',
                    image: product.selected_images?.front?.display?.ru || 
                           product.image_front_url || 
                           product.image_url || 
                           product.images?.front_ru?.sizes?.['400']?.url || 
                           ''
                };
            }
            
            console.log('‚ÑπÔ∏è OpenFoodFacts API: –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        } catch (error: any) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É:', {
                error: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            return null;
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    async searchLocalProductsOnly(query: string, page: number = 1, perPage: number = 20): Promise<LocalSearchResult> {
        return this.searchLocalProducts(query, page, perPage);
    }

    async getLocalProductDetails(id: number): Promise<LocalProduct | null> {
        return this.getLocalProductById(id);
    }

    async getLocalProductByBarcodeOnly(barcode: string): Promise<LocalProduct | null> {
        return this.getLocalProductByBarcode(barcode);
    }
}

export const productService = new ProductService(); 